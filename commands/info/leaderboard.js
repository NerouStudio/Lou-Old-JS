const config = require('../../config.js');
const BaseCommand = require("../../core/Command");
const discord = require('discord.js');
const { QuickDB } = require('quick.db');
const db = new QuickDB();

module.exports = class LeaderboardCommand extends BaseCommand {
    name = 'leaderboard';
    aliases = ['—Ç–æ–ø', '–ª–∏–¥–µ—Ä—ã'];
    description = '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥';
    type = [discord.ApplicationCommandType.ChatInput];
    bot_permissions = [];
    user_permissions = [];
    options = [];
    components_ids = [];
    cooldown = 5;

    async execute(client, interaction) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –ø–æ–±–µ–¥—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        let leaderboard = await this.getLeaderboard();

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
        let description = '';
        if (leaderboard.length === 0) {
            description = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–¥–µ—Ä–æ–≤ —Å–µ–π—á–∞—Å –Ω–µ—Ç.';
        } else {
            for (let i = 0; i < leaderboard.length; i++) {
                const user = leaderboard[i];
                const place = i + 1;
                const emoji = this.getEmojiForPlace(place);
                description += `${emoji} **${place}.** ${user.name}: \`${user.wins}\` –ø–æ–±–µ–¥\n`;
            }
            if (leaderboard.length < 12) {
                description += `\n–í—Å–µ–≥–æ –ª–∏–¥–µ—Ä–æ–≤: ${leaderboard.length}`;
            }
        }

        const embed = new discord.EmbedBuilder()
            .setColor(config.color)
            .setTitle('–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤')
            .setDescription(description)
            .setTimestamp();

        await interaction.reply({ embeds: [embed] });
    }

    async getLeaderboard() {
        const userKeys = await db.all(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const users = userKeys
            .filter(key => key.id.startsWith('userWins_')) // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª—é—á–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –ø–æ–±–µ–¥–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            .map(key => {
                return db.get(key.id).then(wins => ({
                    id: key.id.replace('userWins_', ''),
                    wins: wins
                }));
            });

        const results = await Promise.all(users); // –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
        const sortedUsers = results
            .map(user => ({
                name: `<@${user.id}>`,
                wins: user.wins
            }))
            .sort((a, b) => b.wins - a.wins)
            .slice(0, 12); // –ë–µ—Ä–µ–º —Ç–æ–ø 12 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        return sortedUsers;
    }

    getEmojiForPlace(place) {
        switch (place) {
            case 1: return 'ü•á ';
            case 2: return 'ü•à ';
            case 3: return 'ü•â ';
            default: return `${place}. `;
        }
    }
};
